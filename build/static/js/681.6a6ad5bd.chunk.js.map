{"version":3,"file":"static/js/681.6a6ad5bd.chunk.js","mappings":"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","sources":["pages/Appointment/index.js"],"sourcesContent":["import React from \"react\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport moment from \"moment\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { TopNav } from \"../../components\";\r\nimport makeStyles from \"@mui/styles/makeStyles\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getDokterList,\r\n  getPoliList,\r\n  setAppointment,\r\n} from \"../../redux/actions\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    paddingTop: \"16px\",\r\n  },\r\n}));\r\n\r\nconst Appointment = (props) => {\r\n  const {\r\n    actGetPoli,\r\n    statePoli,\r\n    actGetDokter,\r\n    stateDoctor,\r\n    stateBahasa,\r\n    stateUser,\r\n    stateAppointment,\r\n    actSetAppointment,\r\n  } = props;\r\n  const navigate = useNavigate();\r\n  const classes = useStyles();\r\n  // const [poli, setPoli] = React.useState({\r\n  //   id_poli: \"\",\r\n  //   ref_layanan_nama: \"\",\r\n  // });\r\n  // const [doctor, setDoctor] = React.useState({\r\n  //   peg_id: \"\",\r\n  //   nama_dokter: \"\",\r\n  // });\r\n  const handleAppointment = (key, payload) => {\r\n    actSetAppointment({\r\n      [key]: payload,\r\n    });\r\n  };\r\n  React.useEffect(() => {\r\n    if (!stateUser) {\r\n      return navigate(\"/register\", { replace: true });\r\n    }\r\n    return actGetPoli();\r\n  }, [stateUser, actGetPoli, navigate]);\r\n  React.useEffect(() => {\r\n    if (stateAppointment.layanan.id_poli) {\r\n      actGetDokter({\r\n        layananId: stateAppointment.layanan.id_poli,\r\n        namaDokter: \"\",\r\n      });\r\n    }\r\n  }, [stateAppointment, actGetDokter]);\r\n\r\n  return (\r\n    <>\r\n      <Container className={classes.root}>\r\n        <Stack spacing={2}>\r\n          <TopNav\r\n            type=\"back\"\r\n            title={\r\n              stateBahasa === \"indonesia\" ? \"Buat Janji\" : \"Make Appointment\"\r\n            }\r\n            click={() => {\r\n              navigate(-1);\r\n            }}\r\n          />\r\n          <Autocomplete\r\n            disablePortal\r\n            onChange={(el, val) => {\r\n              handleAppointment(\"layanan\", val);\r\n            }}\r\n            getOptionLabel={(elem) => elem.ref_layanan_nama}\r\n            value={stateAppointment.layanan}\r\n            isOptionEqualToValue={(option, value) =>\r\n              option.id_poli === value.id_poli\r\n            }\r\n            disabled={stateAppointment.layanan.disabled}\r\n            options={statePoli.length > 0 ? statePoli : []}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label=\"Poli\"\r\n                error={!stateAppointment.layanan.id_poli}\r\n              />\r\n            )}\r\n          />\r\n          <Autocomplete\r\n            disablePortal\r\n            onChange={(el, val) => {\r\n              handleAppointment(\"dokter\", val);\r\n            }}\r\n            disabled={\r\n              stateAppointment.dokter.disabled ||\r\n              !stateAppointment.layanan.id_poli\r\n            }\r\n            getOptionLabel={(elem) => elem.nama_dokter}\r\n            value={stateAppointment.dokter}\r\n            isOptionEqualToValue={(option, value) =>\r\n              option.peg_id === value.peg_id\r\n            }\r\n            options={stateDoctor.length > 0 ? stateDoctor : []}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label=\"Dokter\"\r\n                error={!stateAppointment.dokter.peg_id}\r\n              />\r\n            )}\r\n          />\r\n          <TextField\r\n            id=\"tanggal\"\r\n            name=\"tanggal\"\r\n            type=\"date\"\r\n            inputProps={{\r\n              min: moment().add(1, \"days\").format(\"YYYY-MM-DD\"),\r\n              max: moment().add(3, \"days\").format(\"YYYY-MM-DD\"),\r\n            }}\r\n            label={\r\n              stateBahasa === \"indonesia\" ? \"Tanggal Kunjungan\" : \"Visit Date\"\r\n            }\r\n            onChange={(e) => handleAppointment(\"tanggal\", e.target.value)}\r\n            value={stateAppointment.tanggal}\r\n            // label=\"Tanggal Lahir - Birthdate\"\r\n            required\r\n            disabled={\r\n              !stateAppointment.dokter.peg_id ||\r\n              !stateAppointment.layanan.id_poli\r\n            }\r\n            error={!stateAppointment.tanggal}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n          />\r\n          {/* <TextField type={\"time\"} /> */}\r\n          {/* <TextField /> */}\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            {stateBahasa === \"indonesia\"\r\n              ? \"*Buat janji hanya berlaku untuk keesokan hari\"\r\n              : \"*Only for future days\"}\r\n          </Typography>\r\n          <Button\r\n            disabled={\r\n              !stateAppointment.layanan.id_poli ||\r\n              !stateAppointment.dokter.peg_id ||\r\n              !stateAppointment.tanggal\r\n            }\r\n            variant=\"contained\"\r\n            onClick={() => navigate(\"/make-payment\")}\r\n          >\r\n            Buat Janji\r\n          </Button>\r\n        </Stack>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    stateBahasa: state.app.bahasa,\r\n    stateUser: state.auth.user,\r\n    statePoli: state.master.poliList,\r\n    stateDoctor: state.master.doctorList,\r\n    stateAppointment: state.register.appointment,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    actGetPoli: (body) => dispatch(getPoliList(body)),\r\n    actGetDokter: (body) => dispatch(getDokterList(body)),\r\n    actSetAppointment: (body) => dispatch(setAppointment(body)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Appointment);\r\n"],"names":["useStyles","makeStyles","root","paddingTop","connect","state","stateBahasa","app","bahasa","stateUser","auth","user","statePoli","master","poliList","stateDoctor","doctorList","stateAppointment","register","appointment","dispatch","actGetPoli","body","getPoliList","actGetDokter","getDokterList","actSetAppointment","setAppointment","props","navigate","useNavigate","classes","handleAppointment","key","payload","React","replace","layanan","id_poli","layananId","namaDokter","className","spacing","type","title","click","disablePortal","onChange","el","val","getOptionLabel","elem","ref_layanan_nama","value","isOptionEqualToValue","option","disabled","options","length","renderInput","params","label","error","dokter","nama_dokter","peg_id","id","name","inputProps","min","moment","add","format","max","e","target","tanggal","required","InputLabelProps","shrink","variant","color","onClick"],"sourceRoot":""}